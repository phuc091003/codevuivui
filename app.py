import streamlit as st
import pandas as pd
import pymysql
import seaborn as sns
import matplotlib.pyplot as plt
import streamlit.components.v1 as components
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from transformers import pipeline
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM

# C·∫•u h√¨nh trang Streamlit
st.set_page_config(
    page_title="Hotel Analytics",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Th√¥ng tin email
SENDER_EMAIL = 'huuphucnguyen73@gmail.com'
SENDER_PASSWORD = 'uayhjbbkczvgxyue'
SMTP_SERVER = 'smtp.gmail.com'
SMTP_PORT = 587

# C·∫•u h√¨nh k·∫øt n·ªëi MySQL
host = "127.0.0.1"
user = "root"
password = "hoilamj12"
database = "hotel_booking_db"

# Power BI URL
POWERBI_URL = "https://app.powerbi.com/reportEmbed?reportId=619dd003-a214-4810-85a3-c507d75ff8f0&autoAuth=true&ctid=55b99119-ae4f-4bf9-b354-7e6ba2eb1bf2"

# K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu MySQL
def connect_to_db():
    return pymysql.connect(host=host, user=user, password=password, database=database)

# Th·ª±c thi c√¢u truy v·∫•n SQL
def run_query(query):
    conn = connect_to_db()
    try:
        df = pd.read_sql(query, conn)
        return df
    except Exception as e:
        st.error(f"L·ªói: {e}")
        return None
    finally:
        conn.close()

# T√≠ch h·ª£p v√†o giao di·ªán Streamlit
with st.sidebar:  
    # Th√™m tab h√¨nh ·∫£nh c·ªßa Dashboard trong Sidebar
    with st.sidebar:
     st.markdown("### üì∏ H√¨nh ·∫£nh Dashboard")
    image_file = st.file_uploader("T·∫£i l√™n h√¨nh ·∫£nh c·ªßa Dashboard Power BI:", type=["jpg", "png", "jpeg"], key="image_upload")
# T·∫°o b√°o c√°o PDF
def create_pdf(report_text, insights, output_filename="report.pdf"):
    pdfmetrics.registerFont(TTFont('Roboto', 'Roboto-Black.ttf'))

    c = canvas.Canvas(output_filename, pagesize=letter)
    width, height = letter
    c.setFont("Roboto", 16)
    c.drawString(100, height - 40, "B√°o C√°o Ph√¢n T√≠ch ƒê·∫∑t Ph√≤ng Kh√°ch S·∫°n")

    c.setFont("Roboto", 12)

    # Th√™m n·ªôi dung b√°o c√°o
    text_object = c.beginText(100, height - 80)
    text_object.textLines(report_text)
    c.drawText(text_object)

    # Th√™m insight v√†o b√°o c√°o PDF
    if insights:
        c.setFont("Roboto", 12)
        c.drawString(100, height - 150, "C√°c Insight t·ª´ Dashboard Power BI:")
        text_object = c.beginText(100, height - 170)
        text_object.textLines(insights)
        c.drawText(text_object)

    # Th√™m li√™n k·∫øt Power BI v√†o b√°o c√°o
    c.drawString(100, height - 300, "Truy c·∫≠p Dashboard Power BI t·∫°i: " + POWERBI_URL)

    c.showPage()
    c.save()
    
# G·ª≠i email v·ªõi file ƒë√≠nh k√®m PDF
def send_email(to_email, subject, body, attachment_filename, insights, image_filename=None):
    msg = MIMEMultipart()
    msg['From'] = SENDER_EMAIL
    msg['To'] = to_email
    msg['Subject'] = subject

    # N·ªëi ph·∫ßn insight v√†o n·ªôi dung email
    full_body = body + "\n\n" + "C√°c insight t·ª´ Dashboard Power BI:\n" + insights
    msg.attach(MIMEText(full_body, 'plain'))

    # ƒê√≠nh k√®m b√°o c√°o PDF
    with open(attachment_filename, "rb") as attachment:
        part = MIMEApplication(attachment.read(), Name=attachment_filename)
        part['Content-Disposition'] = f'attachment; filename="{attachment_filename}"'
        msg.attach(part)

    # ƒê√≠nh k√®m h√¨nh ·∫£nh n·∫øu c√≥
    if image_filename:
        with open(image_filename, "rb") as img_attachment:
            img_part = MIMEApplication(img_attachment.read(), Name=image_filename)
            img_part['Content-Disposition'] = f'attachment; filename="{image_filename}"'
            msg.attach(img_part)

    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.sendmail(SENDER_EMAIL, to_email, msg.as_string())
            st.success("Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!")
    except Exception as e:
        st.error(f"L·ªói khi g·ª≠i email: {e}")
        


# Giao di·ªán Streamlit
st.markdown("<h2>üì§ G·ª≠i B√°o C√°o qua Email</h2>", unsafe_allow_html=True)

# CSS
st.markdown("""
<style>
    :root {
        --primary: #005B96;
        --secondary: #0288D1;
        --accent: #81D4FA;
        --bg: #F9FAFB;
        --text: #2C3E50;
        --sidebar-bg: #E3F2FD;
        --sidebar-text: #004466;
    }

    .stApp {
        background-color: var(--bg);
        color: var(--text);
    }

    h1, h2, h3 {
        color: var(--primary) !important;
        font-family: 'Playfair Display', serif !important;
        padding: 1rem 0;
        border-bottom: 2px solid var(--accent);
    }

    .stButton>button {
        background-color: var(--secondary);
        color: white;
        border-radius: 5px;
        padding: 0.5rem 1rem;
        border: none;
        transition: all 0.3s;
    }

    .stButton>button:hover {
        background-color: var(--primary);
        transform: translateY(-2px);
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    [data-testid=stSidebar] {
        background-color: var(--sidebar-bg);
        color: var(--sidebar-text);
        padding: 1rem;
    }

    .sidebar-content {
        color: var(--sidebar-text);
    }

    .dataframe {
        background: white;
        border-radius: 8px;
        padding: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .stPlot {
        background: white;
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

# Header
st.markdown("<h1 style='text-align:center'>üè® Hotel Analytics Dashboard</h1>", unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.markdown("### üîç Ph√¢n T√≠ch")
    query = st.text_area("üìù SQL Query:", "SELECT * FROM hotel_booking LIMIT 10;", height=150)
    # Hi·ªÉn th·ªã c√¢u l·ªánh SQL sau khi ng∆∞·ªùi d√πng ch·ªçn c√¢u h·ªèi
    if st.button("üöÄ Th·ª±c thi"):
        with st.spinner("ƒêang x·ª≠ l√Ω..."):
            df = run_query(query)
            if df is not None:
                st.dataframe(df)
                df.to_csv("results.csv", index=False)
                st.success("‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£")

    analysis = st.selectbox("üìä Ch·ªçn ph√¢n t√≠ch:", [
        "Dashboard",
        "T·ª∑ l·ªá h·ªßy ƒë·∫∑t ph√≤ng",
        "Doanh thu theo lo·∫°i ph√≤ng",
        "Th·ªùi gian l∆∞u tr√∫",
        "Th·ªëng k√™ ƒë·∫∑t tr∆∞·ªõc",
        "So s√°nh doanh thu"
    ])
# Main content
# Insight
direct_insights = """
1. T·ªïng doanh thu v√† s·ªë l∆∞·ª£ng h·ªßy ph√≤ng
T·ªïng doanh thu: 46,34 tri·ªáu.
S·ªë l∆∞·ª£ng h·ªßy ph√≤ng: 43 ngh√¨n l∆∞·ª£t.
ƒê√¢y l√† m·ªôt con s·ªë ƒë√°ng ch√∫ √Ω, cho th·∫•y t·ª∑ l·ªá h·ªßy ph√≤ng c√≥ th·ªÉ ·∫£nh h∆∞·ªüng l·ªõn ƒë·∫øn doanh thu.
2. T·ª∑ l·ªá h·ªßy ph√≤ng theo m√πa
T·ª∑ l·ªá h·ªßy ph√≤ng cao nh·∫•t v√†o m√πa h√® (Summer) v·ªõi gi√° tr·ªã kho·∫£ng 0,377.
T·ª∑ l·ªá h·ªßy gi·∫£m d·∫ßn qua c√°c m√πa:
M√πa xu√¢n (Spring): 0,36.
M√πa thu (Autumn): 0,34.
M√πa ƒë√¥ng (Winter): 0,22 (th·∫•p nh·∫•t).
M√πa h√® c√≥ t·ª∑ l·ªá h·ªßy ph√≤ng cao nh·∫•t, c√≥ th·ªÉ do nhu c·∫ßu du l·ªãch tƒÉng cao nh∆∞ng kh√°ch h√†ng thay ƒë·ªïi k·∫ø ho·∫°ch th∆∞·ªùng xuy√™n.
3. T·ªïng doanh thu theo m√πa
Doanh thu cao nh·∫•t v√†o m√πa h√® (Summer) v·ªõi h∆°n 19,5 tri·ªáu.
C√°c m√πa kh√°c:
M√πa xu√¢n (Spring): kho·∫£ng 11,7 tri·ªáu.
M√πa thu (Autumn): kho·∫£ng 10,5 tri·ªáu.
M√πa ƒë√¥ng (Winter): th·∫•p nh·∫•t, kho·∫£ng 4,6 tri·ªáu.
M√πa h√® l√† m√πa cao ƒëi·ªÉm, mang l·∫°i doanh thu l·ªõn nh·∫•t, trong khi m√πa ƒë√¥ng l√† m√πa th·∫•p ƒëi·ªÉm.
4. Doanh thu theo lo·∫°i kh√°ch h√†ng
Ph√¢n b·ªï kh√°ch h√†ng:
Transient (kh√°ch l·∫ª): chi·∫øm t·ª∑ l·ªá l·ªõn nh·∫•t, kho·∫£ng 67,5%.
Contract (h·ª£p ƒë·ªìng): kho·∫£ng 12,4%.
Group (nh√≥m): kho·∫£ng 11,2%.
Transient-Party: kho·∫£ng 8,9%.
Kh√°ch l·∫ª l√† ngu·ªìn doanh thu ch√≠nh, trong khi kh√°ch nh√≥m v√† h·ª£p ƒë·ªìng chi·∫øm t·ª∑ l·ªá nh·ªè h∆°n.
5. S·ªë l∆∞·ª£ng ƒë·∫∑t ph√≤ng theo th√°ng
S·ªë l∆∞·ª£ng ƒë·∫∑t ph√≤ng cao nh·∫•t v√†o th√°ng 5 v√† th·∫•p nh·∫•t l√† v√†o th√°ng 2.
S·ªë l∆∞·ª£ng ƒë·∫∑t ph√≤ng tƒÉng d·∫ßn t·ª´ ƒë·∫ßu nƒÉm, ƒë·∫°t ƒë·ªânh v√†o m√πa h√® (th√°ng 5), sau ƒë√≥ gi·∫£m d·∫ßn v√†o cu·ªëi nƒÉm.
6. B·∫£n ƒë·ªì ph√¢n b·ªë
B·∫£n ƒë·ªì hi·ªÉn th·ªã c√°c ƒëi·ªÉm ƒë·∫∑t ph√≤ng tr√™n to√†n c·∫ßu, t·∫≠p trung ch·ªß y·∫øu ·ªü c√°c khu v·ª±c l·ªõn nh∆∞ ch√¢u √Çu, B·∫Øc M·ªπ, v√† ƒê√¥ng √Å.
ƒê·ªÅ xu·∫•t v√† chi·∫øn l∆∞·ª£c:

1 Trong khi doanh thu v√† t·ª∑ l·ªá ƒë·∫∑t ph√≤ng th·∫•p v√†o m√πa ƒë√¥ng, b·∫°n c√≥ th·ªÉ ph√°t tri·ªÉn c√°c chi·∫øn l∆∞·ª£c marketing ƒë·∫∑c bi·ªát cho th·ªùi gian n√†y. Cung c·∫•p c√°c g√≥i d·ªãch v·ª• ƒë·∫∑c bi·ªát cho kh√°ch du l·ªãch m√πa ƒë√¥ng nh∆∞ c√°c tour du l·ªãch, d·ªãch v·ª• spa, ho·∫∑c c√°c ho·∫°t ƒë·ªông trong nh√†
"""

# Kh·ªüi t·∫°o tr·∫°ng th√°i giao di·ªán
if "insight_visible" not in st.session_state:
    st.session_state["insight_visible"] = True

# Giao di·ªán ch√≠nh
# Giao di·ªán ch√≠nh
if "Dashboard":
    # ƒêi·ªÅu ch·ªânh t·ª∑ l·ªá c·ªôt theo tr·∫°ng th√°i Insight
    if st.session_state["insight_visible"]:
        col1, col2 = st.columns([4, 1])
    else:
        col1, col2 = st.columns([5, 0.5])

    # C·ªôt ch√≠nh hi·ªÉn th·ªã Power BI Dashboard
    with col1:
        with st.expander("üìä Power BI Dashboard", expanded=True):
            try:
                components.iframe(POWERBI_URL, height=600)
            except Exception as e:
                st.error(f"‚ùå L·ªói: {str(e)}")

        with st.expander("üîç Ph√¢n T√≠ch D·ªØ Li·ªáu Tr·ª±c Ti·∫øp", expanded=False):
            uploaded_file = st.file_uploader("üìÇ T·∫£i l√™n t·ªáp d·ªØ li·ªáu CSV:", type=["csv"], key="csv_upload")
            if uploaded_file is not None:
                data = pd.read_csv(uploaded_file)
                st.markdown("#### üìà D·ªØ li·ªáu ƒë√£ t·∫£i l√™n:")
                st.dataframe(data.head(10))
                st.markdown("#### üõ†Ô∏è Ph√¢n t√≠ch c∆° b·∫£n:")
                st.write("S·ªë h√†ng v√† c·ªôt:", data.shape)
                st.write("Th√¥ng tin d·ªØ li·ªáu:", data.describe())
                st.write("D·ªØ li·ªáu thi·∫øu:", data.isnull().sum())
                if st.checkbox("üìä Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n ph·ªëi c·ªôt ƒë·∫ßu ti√™n"):
                    fig, ax = plt.subplots(figsize=(10, 6))
                    sns.histplot(data.iloc[:, 0], kde=True, ax=ax)
                    st.pyplot(fig)

    # C·ªôt ph·ª• hi·ªÉn th·ªã khung nh·∫≠p Insight
    with col2:
        # N√∫t toggle tr·∫°ng th√°i ·∫©n/hi·ªán Insight
        toggle_button = "·∫®n" if st.session_state["insight_visible"] else "Hi·ªán"
        if st.button(f"üîÑ {toggle_button} Insight"):
            st.session_state["insight_visible"] = not st.session_state["insight_visible"]

        if st.session_state["insight_visible"]:
            st.markdown("### üîç Nh·∫≠p th√¥ng tin Insight")
            
            # **Move the direct insights to an expandable section**
            with st.expander("üëâ C√°c Insight ƒë√£ nh·∫≠p:", expanded=False):
                st.write(direct_insights)

            # Hi·ªÉn th·ªã khung nh·∫≠p th√™m insight n·∫øu c·∫ßn
            insights = st.text_area(
                "üìù Nh·∫≠p c√°c insight b·∫°n thu th·∫≠p ƒë∆∞·ª£c t·ª´ Dashboard Power BI:",
                height=200,
            )
            # Hi·ªÉn th·ªã c√°c insight ƒë√£ nh·∫≠p
            if insights.strip():
                st.markdown("#### Nh·ªØng Insight ƒë√£ nh·∫≠p:")
                st.write(insights)

            # Th√™m khung nh·∫≠p tr·ª±c ti·∫øp Insight v√†o code
            with st.expander("üîß T√πy ch·ªânh ho·∫∑c x·ª≠ l√Ω Insight th√™m", expanded=False):
                st.code(insights, language="python")
if analysis == "T·ª∑ l·ªá h·ªßy ƒë·∫∑t ph√≤ng":
    st.markdown("### üìä T·ª∑ l·ªá H·ªßy ƒê·∫∑t Ph√≤ng")
    query = "SELECT is_canceled, COUNT(*) AS count FROM hotel_booking GROUP BY is_canceled"
    df = run_query(query)

    if df is not None:
         # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu
        st.dataframe(df)
        df['is_canceled'] = df['is_canceled'].map({0: 'Kh√¥ng h·ªßy', 1: 'H·ªßy'})
        fig, ax = plt.subplots(figsize=(8, 6))
        sns.barplot(data=df, x='is_canceled', y='count', ax=ax, palette='viridis')
        ax.set_title("T·ª∑ l·ªá H·ªßy ƒê·∫∑t Ph√≤ng")
        ax.set_xlabel("Tr·∫°ng Th√°i H·ªßy")
        ax.set_ylabel("S·ªë L∆∞·ª£ng")
        st.pyplot(fig)

if analysis == "Doanh thu theo lo·∫°i ph√≤ng":
    st.markdown("### üìä Doanh Thu Theo Lo·∫°i Ph√≤ng")
    query = """
        SELECT assigned_room_type AS room_type, SUM(adr) AS revenue
        FROM hotel_booking
        WHERE is_canceled = 0
        GROUP BY assigned_room_type
        ORDER BY revenue DESC
    """
    df = run_query(query)

    if df is not None:
         # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu
        st.dataframe(df)
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.barplot(data=df, x='room_type', y='revenue', ax=ax, palette='coolwarm')
        ax.set_title("Doanh Thu Theo Lo·∫°i Ph√≤ng")
        ax.set_xlabel("Lo·∫°i Ph√≤ng")
        ax.set_ylabel("Doanh Thu (ADR)")
        st.pyplot(fig)

if analysis == "Th·ªùi gian l∆∞u tr√∫":
    st.markdown("### üìä Th·ªùi Gian L∆∞u Tr√∫")
    query = """
        SELECT 
            (stays_in_weekend_nights + stays_in_week_nights) AS total_stay, 
            COUNT(*) AS count
        FROM hotel_booking
        GROUP BY total_stay
        ORDER BY total_stay
    """
    df = run_query(query)

    if df is not None:
         # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu
        st.dataframe(df)
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.barplot(data=df, x='total_stay', y='count', ax=ax, palette='muted')
        ax.set_title("Ph√¢n Ph·ªëi Th·ªùi Gian L∆∞u Tr√∫")
        ax.set_xlabel("Th·ªùi Gian L∆∞u Tr√∫ (ƒê√™m)")
        ax.set_ylabel("S·ªë L∆∞·ª£ng")
        st.pyplot(fig)

if analysis == "Th·ªëng k√™ ƒë·∫∑t tr∆∞·ªõc":
    st.markdown("### üìä Th·ªëng K√™ ƒê·∫∑t Tr∆∞·ªõc")
    query = """
        SELECT lead_time, COUNT(*) AS count
        FROM hotel_booking
        GROUP BY lead_time
        ORDER BY lead_time
        LIMIT 50
    """
    df = run_query(query)

    if df is not None:
         # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu
        st.dataframe(df)
        fig, ax = plt.subplots(figsize=(12, 6))
        sns.lineplot(data=df, x='lead_time', y='count', ax=ax, color='green', marker='o')
        ax.set_title("Th·ªëng K√™ Th·ªùi Gian ƒê·∫∑t Tr∆∞·ªõc")
        ax.set_xlabel("Th·ªùi Gian ƒê·∫∑t Tr∆∞·ªõc (Ng√†y)")
        ax.set_ylabel("S·ªë L∆∞·ª£ng")
        st.pyplot(fig)

if analysis == "So s√°nh doanh thu":
    st.markdown("### üìä So S√°nh Doanh Thu Theo NƒÉm")
    query = """
        SELECT arrival_date_year AS year, SUM(adr) AS revenue
        FROM hotel_booking
        WHERE is_canceled = 0
        GROUP BY arrival_date_year
        ORDER BY year
    """
    df = run_query(query)

    if df is not None:
         # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu
        st.dataframe(df)
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.barplot(data=df, x='year', y='revenue', ax=ax, palette='Spectral')
        ax.set_title("So S√°nh Doanh Thu Theo NƒÉm")
        ax.set_xlabel("NƒÉm")
        ax.set_ylabel("Doanh Thu (ADR)")
        st.pyplot(fig)

# Nh·∫≠p th√¥ng tin ng∆∞·ªùi nh·∫≠n email
to_email = st.text_input("üìß Email ng∆∞·ªùi nh·∫≠n:")
report_text = st.text_area("‚úçÔ∏è N·ªôi dung b√°o c√°o:")
attachment_filename = "hotel_report.pdf"

if st.button("üìÑ T·∫°o B√°o C√°o"):
    create_pdf(report_text, insights, output_filename=attachment_filename)
    st.success(f"B√°o c√°o PDF ƒë√£ ƒë∆∞·ª£c t·∫°o: {attachment_filename}")

img_path = None

if image_file is not None:
    img_path = f"dashboard_image.{image_file.type.split('/')[1]}"
    with open(img_path, "wb") as f:
        f.write(image_file.getbuffer())
        
# C·∫≠p nh·∫≠t ph·∫ßn g·ª≠i email
if st.button("üìß G·ª≠i Email"):
    if not to_email:
        st.error("Vui l√≤ng nh·∫≠p email ng∆∞·ªùi nh·∫≠n!")
    elif not insights:  # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ nh·∫≠p insight kh√¥ng
        st.error("Vui l√≤ng nh·∫≠p insight t·ª´ Dashboard Power BI!")
    else:
        send_email(to_email, "B√°o C√°o Ph√¢n T√≠ch Kh√°ch S·∫°n", report_text, attachment_filename, insights, image_filename=img_path)
