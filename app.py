import streamlit as st
import pandas as pd
import pymysql
import seaborn as sns
import matplotlib.pyplot as plt
import streamlit.components.v1 as components
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from transformers import pipeline
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM

# C·∫•u h√¨nh trang Streamlit
st.set_page_config(
    page_title="Hotel Analytics",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Th√¥ng tin email
SENDER_EMAIL = 'huuphucnguyen73@gmail.com'
SENDER_PASSWORD = 'uayhjbbkczvgxyue'
SMTP_SERVER = 'smtp.gmail.com'
SMTP_PORT = 587

# C·∫•u h√¨nh k·∫øt n·ªëi MySQL
host = "127.0.0.1"
user = "root"
password = "hoilamj12"
database = "hotel_booking_db"

# Power BI URL
POWERBI_URL = "https://app.powerbi.com/reportEmbed?reportId=619dd003-a214-4810-85a3-c507d75ff8f0&autoAuth=true&ctid=55b99119-ae4f-4bf9-b354-7e6ba2eb1bf2"

# K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu MySQL
def connect_to_db():
    return pymysql.connect(host=host, user=user, password=password, database=database)

# Th·ª±c thi c√¢u truy v·∫•n SQL
def run_query(query):
    conn = connect_to_db()
    try:
        df = pd.read_sql(query, conn)
        return df
    except Exception as e:
        st.error(f"L·ªói: {e}")
        return None
    finally:
        conn.close()

# T·∫£i m√¥ h√¨nh NLP Hugging Face
@st.cache_resource
def load_nlp_model():
    model_name = "Salesforce/codet5-base"  # C√≥ th·ªÉ thay th·∫ø b·∫±ng m√¥ h√¨nh kh√°c nh∆∞ "t5-small"
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSeq2SeqLM.from_pretrained(model_name)
    return tokenizer, model

# H√†m chuy·ªÉn ƒë·ªïi c√¢u h·ªèi t·ª± nhi√™n th√†nh c√¢u l·ªánh SQL
def nlp_to_sql(question, table_schema="hotel_booking"):
    try:
        tokenizer, model = load_nlp_model()
        prompt = f"Translate the following question into SQL query for the table {table_schema}:\n{question}"
        inputs = tokenizer(prompt, return_tensors="pt", max_length=512, truncation=True)
        outputs = model.generate(inputs.input_ids, max_length=128, num_beams=4, early_stopping=True)
        sql_query = tokenizer.decode(outputs[0], skip_special_tokens=True)
        return sql_query
    except Exception as e:
        return f"L·ªói khi s·ª≠ d·ª•ng m√¥ h√¨nh NLP: {e}"

# T√≠ch h·ª£p v√†o giao di·ªán Streamlit
with st.sidebar:
    st.markdown("### ü§ñ NLP Chuy·ªÉn ƒê·ªïi")
    natural_language_question = st.text_area(
        "Nh·∫≠p c√¢u h·ªèi t·ª± nhi√™n (v√≠ d·ª•: 'Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c ƒë·∫∑t ph√≤ng trong th√°ng 12')", 
        ""
    )

    if st.button("üõ†Ô∏è Chuy·ªÉn ƒê·ªïi Th√†nh SQL"):
        if not natural_language_question:
            st.error("Vui l√≤ng nh·∫≠p c√¢u h·ªèi ƒë·ªÉ chuy·ªÉn ƒë·ªïi!")
        else:
            with st.spinner("ƒêang chuy·ªÉn ƒë·ªïi..."):
                generated_sql = nlp_to_sql(natural_language_question)
                st.text_area("C√¢u l·ªánh SQL ƒë∆∞·ª£c t·∫°o:", generated_sql)
                
    # Th√™m tab h√¨nh ·∫£nh c·ªßa Dashboard trong Sidebar
    with st.sidebar:
     st.markdown("### üì∏ H√¨nh ·∫£nh Dashboard")
    image_file = st.file_uploader("T·∫£i l√™n h√¨nh ·∫£nh c·ªßa Dashboard Power BI:", type=["jpg", "png", "jpeg"])

    # Th·ª±c thi c√¢u l·ªánh SQL ƒë√£ chuy·ªÉn ƒë·ªïi
    if st.button("üöÄ Th·ª±c Thi SQL T·ª´ NLP"):
        if not natural_language_question:
            st.error("Vui l√≤ng nh·∫≠p c√¢u h·ªèi tr∆∞·ªõc!")
        else:
            if 'generated_sql' not in locals() or not generated_sql:
                st.error("Kh√¥ng c√≥ c√¢u l·ªánh SQL h·ª£p l·ªá ƒë·ªÉ th·ª±c thi!")
            else:
                with st.spinner("ƒêang x·ª≠ l√Ω..."):
                    df = run_query(generated_sql)
                    if df is not None:
                        st.dataframe(df)
                    else:
                        st.error("Kh√¥ng th·ªÉ th·ª±c thi c√¢u l·ªánh SQL ƒë√£ t·∫°o.")

# T·∫°o b√°o c√°o PDF
def create_pdf(report_text, insights, output_filename="report.pdf"):
    pdfmetrics.registerFont(TTFont('Roboto', 'Roboto-Black.ttf'))

    c = canvas.Canvas(output_filename, pagesize=letter)
    width, height = letter
    c.setFont("Roboto", 16)
    c.drawString(100, height - 40, "B√°o C√°o Ph√¢n T√≠ch ƒê·∫∑t Ph√≤ng Kh√°ch S·∫°n")

    c.setFont("Roboto", 12)

    # Th√™m n·ªôi dung b√°o c√°o
    text_object = c.beginText(100, height - 80)
    text_object.textLines(report_text)
    c.drawText(text_object)

    # Th√™m insight v√†o b√°o c√°o PDF
    if insights:
        c.setFont("Roboto", 12)
        c.drawString(100, height - 150, "C√°c Insight t·ª´ Dashboard Power BI:")
        text_object = c.beginText(100, height - 170)
        text_object.textLines(insights)
        c.drawText(text_object)

    # Th√™m li√™n k·∫øt Power BI v√†o b√°o c√°o
    c.drawString(100, height - 300, "Truy c·∫≠p Dashboard Power BI t·∫°i: " + POWERBI_URL)

    c.showPage()
    c.save()
    
# G·ª≠i email v·ªõi file ƒë√≠nh k√®m PDF
def send_email(to_email, subject, body, attachment_filename, insights, image_filename=None):
    msg = MIMEMultipart()
    msg['From'] = SENDER_EMAIL
    msg['To'] = to_email
    msg['Subject'] = subject

    # N·ªëi ph·∫ßn insight v√†o n·ªôi dung email
    full_body = body + "\n\n" + "C√°c insight t·ª´ Dashboard Power BI:\n" + insights
    msg.attach(MIMEText(full_body, 'plain'))

    # ƒê√≠nh k√®m b√°o c√°o PDF
    with open(attachment_filename, "rb") as attachment:
        part = MIMEApplication(attachment.read(), Name=attachment_filename)
        part['Content-Disposition'] = f'attachment; filename="{attachment_filename}"'
        msg.attach(part)

    # ƒê√≠nh k√®m h√¨nh ·∫£nh n·∫øu c√≥
    if image_filename:
        with open(image_filename, "rb") as img_attachment:
            img_part = MIMEApplication(img_attachment.read(), Name=image_filename)
            img_part['Content-Disposition'] = f'attachment; filename="{image_filename}"'
            msg.attach(img_part)

    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SENDER_EMAIL, SENDER_PASSWORD)
            server.sendmail(SENDER_EMAIL, to_email, msg.as_string())
            st.success("Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!")
    except Exception as e:
        st.error(f"L·ªói khi g·ª≠i email: {e}")


# Giao di·ªán Streamlit
st.markdown("<h2>üì§ G·ª≠i B√°o C√°o qua Email</h2>", unsafe_allow_html=True)

# CSS
st.markdown("""
<style>
    :root {
        --primary: #005B96;
        --secondary: #0288D1;
        --accent: #81D4FA;
        --bg: #F9FAFB;
        --text: #2C3E50;
        --sidebar-bg: #E3F2FD;
        --sidebar-text: #004466;
    }

    .stApp {
        background-color: var(--bg);
        color: var(--text);
    }

    h1, h2, h3 {
        color: var(--primary) !important;
        font-family: 'Playfair Display', serif !important;
        padding: 1rem 0;
        border-bottom: 2px solid var(--accent);
    }

    .stButton>button {
        background-color: var(--secondary);
        color: white;
        border-radius: 5px;
        padding: 0.5rem 1rem;
        border: none;
        transition: all 0.3s;
    }

    .stButton>button:hover {
        background-color: var(--primary);
        transform: translateY(-2px);
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    [data-testid=stSidebar] {
        background-color: var(--sidebar-bg);
        color: var(--sidebar-text);
        padding: 1rem;
    }

    .sidebar-content {
        color: var(--sidebar-text);
    }

    .dataframe {
        background: white;
        border-radius: 8px;
        padding: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .stPlot {
        background: white;
        border-radius: 10px;
        padding: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

# Header
st.markdown("<h1 style='text-align:center'>üè® Hotel Analytics Dashboard</h1>", unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.markdown("### üîç Ph√¢n T√≠ch")
    query = st.text_area("üìù SQL Query:", "SELECT * FROM hotel_booking LIMIT 10;", height=150)

    if st.button("üöÄ Th·ª±c thi"):
        with st.spinner("ƒêang x·ª≠ l√Ω..."):
            df = run_query(query)
            if df is not None:
                st.dataframe(df)
                df.to_csv("results.csv", index=False)
                st.success("‚úÖ ƒê√£ l∆∞u k·∫øt qu·∫£")

    analysis = st.selectbox("üìä Ch·ªçn ph√¢n t√≠ch:", [
        "Dashboard",
        "T·ª∑ l·ªá h·ªßy ƒë·∫∑t ph√≤ng",
        "Doanh thu theo lo·∫°i ph√≤ng",
        "Th·ªùi gian l∆∞u tr√∫",
        "Th·ªëng k√™ ƒë·∫∑t tr∆∞·ªõc",
        "So s√°nh doanh thu"
    ])

# Main content
if analysis == "Dashboard":
    col1, col2 = st.columns([3, 1])

    with col2:
        st.markdown("### üîç Nh·∫≠p th√¥ng tin Insight t·ª´ Dashboard")
        
        # √î nh·∫≠p ƒë·ªÉ ng∆∞·ªùi d√πng cung c·∫•p insight
        insights = st.text_area("üìù Nh·∫≠p c√°c insight b·∫°n thu th·∫≠p ƒë∆∞·ª£c t·ª´ Dashboard Power BI:")

        # Hi·ªÉn th·ªã c√°c insight ƒë√£ nh·∫≠p
        if insights:
            st.write(f"Nh·ªØng insight t·ª´ Dashboard: {insights}")

    with col1:
        with st.expander("üìä Power BI Dashboard", expanded=True):
            try:
                components.iframe(POWERBI_URL, height=600)
            except Exception as e:
                st.error(f"‚ùå L·ªói: {str(e)}")

        with st.expander("üîç Ph√¢n T√≠ch D·ªØ Li·ªáu Tr·ª±c Ti·∫øp", expanded=False):
            uploaded_file = st.file_uploader("üìÇ T·∫£i l√™n t·ªáp d·ªØ li·ªáu CSV:", type=["csv"])
            if uploaded_file is not None:
                data = pd.read_csv(uploaded_file)
                st.markdown("#### üìà D·ªØ li·ªáu ƒë√£ t·∫£i l√™n:")
                st.dataframe(data.head(10))

                st.markdown("#### üõ†Ô∏è Ph√¢n t√≠ch c∆° b·∫£n:")
                st.write("S·ªë h√†ng v√† c·ªôt:", data.shape)
                st.write("Th√¥ng tin d·ªØ li·ªáu:", data.describe())
                st.write("D·ªØ li·ªáu thi·∫øu:", data.isnull().sum())
                if st.checkbox("üìä Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n ph·ªëi c·ªôt ƒë·∫ßu ti√™n"):
                    fig, ax = plt.subplots(figsize=(10, 6))
                    sns.histplot(data.iloc[:, 0], kde=True, ax=ax)
                    st.pyplot(fig)

# Nh·∫≠p th√¥ng tin ng∆∞·ªùi nh·∫≠n email
to_email = st.text_input("üìß Email ng∆∞·ªùi nh·∫≠n:")
report_text = st.text_area("‚úçÔ∏è N·ªôi dung b√°o c√°o:")
attachment_filename = "hotel_report.pdf"

if st.button("üìÑ T·∫°o B√°o C√°o"):
    create_pdf(report_text, insights, output_filename=attachment_filename)
    st.success(f"B√°o c√°o PDF ƒë√£ ƒë∆∞·ª£c t·∫°o: {attachment_filename}")

img_path = None

if image_file is not None:
    img_path = f"dashboard_image.{image_file.type.split('/')[1]}"
    with open(img_path, "wb") as f:
        f.write(image_file.getbuffer())
        
# C·∫≠p nh·∫≠t ph·∫ßn g·ª≠i email
if st.button("üìß G·ª≠i Email"):
    if not to_email:
        st.error("Vui l√≤ng nh·∫≠p email ng∆∞·ªùi nh·∫≠n!")
    elif not insights:  # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ nh·∫≠p insight kh√¥ng
        st.error("Vui l√≤ng nh·∫≠p insight t·ª´ Dashboard Power BI!")
    else:
        send_email(to_email, "B√°o C√°o Ph√¢n T√≠ch Kh√°ch S·∫°n", report_text, attachment_filename, insights, image_filename=img_path)
